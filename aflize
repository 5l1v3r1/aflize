#!/bin/bash

# Prepares a directory with Debian packages compiled in a form ready for
# fuzzing with american fuzzy lop. See README.md for more details.
#
# AUTHOR: Jacek "d33tah" Wielemborek, licensed under WTFPL.

# TODO: use CFLAGS and CXXFLAGS for -fsanitize=address; some build targets
# complain when a space is in $CC.
export CC="afl-gcc -fsanitize=address"
export CXX="afl-g++ -fsanitize=address"

# We overwrote /usr/bin/gcc, so we need to specify AFL_CC to avoid afl-gcc
# calling itself.
export AFL_CC="gcc-5"
export AFL_CXX="gcc-5"

# NOTE: we're skipping tests to speed things up.
export DEB_BUILD_OPTIONS=nocheck

# No idea if it's actually necessary if we have ASAN - if you have an opinion,
# let me know.
export AFL_HARDEN=1

export FORCE_UNSAFE_CONFIGURE=1  # for coreutils root build check.
export ASAN_OPTIONS=detect_leaks=0  # we don't need leak checks while building

if [ "$#" = "0" ]; then

        if [ ! -f ~/packages.list ]; then
            # We skip the first 6 lines because of a quite lengthy header.
            dpkg -l | tail -n +6 | awk '{ print $2 }' > ~/packages.list
        fi

        PKGS=`cat ~/packages.list`
else
        PKGS=$@
fi

for pkg in $PKGS; do

        # Building some source packages results in more than one .deb file.
        # There's no point building coreutils multiple times just because we
        # need mount, libmount1 and libmount1-dev, for example.
        if [ -f ~/pkgs/${pkg}_* ]; then
            echo "Skipping $pkg because it's already in ~/pkgs."
            continue
        fi

        echo "Aflizing $pkg"

        cd ~/pkg
        apt-get build-dep -y $pkg 2>&1
        apt-get source $pkg 2>&1
        cd *
        dpkg-buildpackage -uc -us -Jauto 2>&1 || echo $pkg >> ~/failed
        mv ~/pkg/*.deb ~/pkgs
        rm -rf ~/pkg/.* ~/pkg/*

done | perl -pe '$|=1; print scalar(localtime()), ": ";'
